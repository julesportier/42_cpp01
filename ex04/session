let SessionLoad = 1
let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
let v:this_session=expand("<sfile>:p")
silent only
silent tabonly
cd ~/Documents/cpp01/ex04
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
let s:shortmess_save = &shortmess
if &shortmess =~ 'A'
  set shortmess=aoOA
else
  set shortmess=aoO
endif
badd +42 src/main.cpp
badd +30 Makefile
badd +1 FileBuf.cpp
badd +22 src/FileBuf.cpp
badd +8 src/FileBuf.h
badd +0 test.txt
argglobal
%argdel
$argadd src/main.cpp
$argadd Makefile
edit src/main.cpp
let s:save_splitbelow = &splitbelow
let s:save_splitright = &splitright
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd _ | wincmd |
split
1wincmd k
wincmd w
wincmd w
wincmd _ | wincmd |
split
1wincmd k
wincmd w
let &splitbelow = s:save_splitbelow
let &splitright = s:save_splitright
wincmd t
let s:save_winminheight = &winminheight
let s:save_winminwidth = &winminwidth
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 26 + 28) / 57)
exe 'vert 1resize ' . ((&columns * 112 + 112) / 225)
exe '2resize ' . ((&lines * 28 + 28) / 57)
exe 'vert 2resize ' . ((&columns * 112 + 112) / 225)
exe '3resize ' . ((&lines * 26 + 28) / 57)
exe 'vert 3resize ' . ((&columns * 112 + 112) / 225)
exe '4resize ' . ((&lines * 28 + 28) / 57)
exe 'vert 4resize ' . ((&columns * 112 + 112) / 225)
argglobal
balt src/FileBuf.cpp
setlocal foldmethod=manual
setlocal foldexpr=0
setlocal foldmarker={{{,}}}
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldenable
silent! normal! zE
let &fdl = &fdl
let s:l = 25 - ((14 * winheight(0) + 13) / 26)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 25
normal! 09|
wincmd w
argglobal
if bufexists(fnamemodify("test.txt", ":p")) | buffer test.txt | else | edit test.txt | endif
if &buftype ==# 'terminal'
  silent file test.txt
endif
balt Makefile
setlocal foldmethod=manual
setlocal foldexpr=0
setlocal foldmarker={{{,}}}
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldenable
silent! normal! zE
let &fdl = &fdl
let s:l = 3 - ((2 * winheight(0) + 14) / 28)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 3
normal! 06|
wincmd w
argglobal
if bufexists(fnamemodify("src/FileBuf.cpp", ":p")) | buffer src/FileBuf.cpp | else | edit src/FileBuf.cpp | endif
if &buftype ==# 'terminal'
  silent file src/FileBuf.cpp
endif
balt src/FileBuf.h
setlocal foldmethod=manual
setlocal foldexpr=0
setlocal foldmarker={{{,}}}
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldenable
silent! normal! zE
let &fdl = &fdl
let s:l = 34 - ((20 * winheight(0) + 13) / 26)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 34
normal! 02|
wincmd w
argglobal
if bufexists(fnamemodify("src/FileBuf.h", ":p")) | buffer src/FileBuf.h | else | edit src/FileBuf.h | endif
if &buftype ==# 'terminal'
  silent file src/FileBuf.h
endif
balt src/FileBuf.cpp
setlocal foldmethod=manual
setlocal foldexpr=0
setlocal foldmarker={{{,}}}
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldenable
silent! normal! zE
let &fdl = &fdl
let s:l = 2 - ((1 * winheight(0) + 14) / 28)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 2
normal! 018|
wincmd w
3wincmd w
exe '1resize ' . ((&lines * 26 + 28) / 57)
exe 'vert 1resize ' . ((&columns * 112 + 112) / 225)
exe '2resize ' . ((&lines * 28 + 28) / 57)
exe 'vert 2resize ' . ((&columns * 112 + 112) / 225)
exe '3resize ' . ((&lines * 26 + 28) / 57)
exe 'vert 3resize ' . ((&columns * 112 + 112) / 225)
exe '4resize ' . ((&lines * 28 + 28) / 57)
exe 'vert 4resize ' . ((&columns * 112 + 112) / 225)
tabnext 1
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0 && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20
let &shortmess = s:shortmess_save
let &winminheight = s:save_winminheight
let &winminwidth = s:save_winminwidth
let s:sx = expand("<sfile>:p:r")."x.vim"
if filereadable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &g:so = s:so_save | let &g:siso = s:siso_save
set hlsearch
nohlsearch
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
